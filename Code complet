#include <stdio.h>
#include <windows.h>
#include<stdlib.h>
#include<conio.h>
#include <time.h>
#include<unistd.h>
//definition des constante pour la taille du tableau et le nombre d'obstacle"
#define ligne 10
#define colonne 20
#define obstacle 8
#define PIEGE 6

/*creation matrice avec "*" pour les bordure*/
void InitialisationMatrice(char Tableau[ligne][colonne]) {
    char NvTableau[ligne][colonne] = {
            {'*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*'},
            {'*', 'O', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'O', '*'},
            {'*', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '*'},
            {'*', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '*'},
            {'*', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '*'},
            {'*', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '*'},
            {'*', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '*'},
            {'*', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '*'},
            {'*', 'O', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'O', '*'},
            {'*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*'},
    };
    for (int i = 0; i < ligne; i++) {
        for (int j = 0; j < colonne; j++) {
            Tableau[i][j] = NvTableau[i][j];
        }
    }
}

/*affichage du tableau, de la position du joueur et de la position des obstacle*/
void Affichage(char Tab[ligne][colonne], int PosJoueur[2], int Obstacle[2][obstacle], int Piege[2][PIEGE]) {
    int indicateur = 0;
    for (int i = 0; i < ligne; i++) {
        for (int j = 0; j < colonne; j++) {
            if (PosJoueur[0] == i && PosJoueur[1] == j) {
                printf("P");
                indicateur = 1;
            } else {
                for(int z=0;z<PIEGE;z++){
                    if(Piege[0][z]==i && Piege[1][z]==j){
                        printf("%c",177);
                        indicateur=1;
                    }
                }
                for (int k = 0; k < obstacle; k++) {
                    if (Obstacle[0][k] == i && Obstacle[1][k] == j) {
                        printf("%c", 223);
                        indicateur = 1;
                    }
                }
            }
            if (indicateur == 0) {
                printf("%c", Tab[i][j]);
            }
            printf("|");
            indicateur = 0;
        }
        printf("\n");
    }
    printf("\n");
}

/* cette fonction gere le deplacemnt du joueur en fonction de la touche qui a etait appuyée*/
void DeplacementJoueur(int PosJoueur[2], char touche, int Obst[2][obstacle], int piege[2][PIEGE]) {
    int indicateur = 0;
    if (touche == 'q') {
        if (PosJoueur[1] == 1) {
            printf("AIE... Snoopy s'est cogne la tete contre le mur !\n");
            indicateur = 1;
        } else {
            for(int z=0;z<PIEGE;z++){
                if(PosJoueur[0]== piege[0][z] && PosJoueur[1]==piege[1][z] + 1){
                    printf("Game over");
                    indicateur=2;
                }
            }
            for (int k = 0; k < obstacle; k++) {
                if (PosJoueur[0] == Obst[0][k] && PosJoueur[1] == Obst[1][k] + 1) {
                    printf("Ceci est un obstacle\n ");
                    indicateur = 1;
                }
            }
        }
        if (indicateur == 0) {
            PosJoueur[1] = PosJoueur[1] - 1;
        }
        else if(indicateur==2){
            exit(0);
        }
    } else if (touche == 'd') {
        if (PosJoueur[1] == 18) {
            printf("Snoopy s'est cogne la tete contre le mur ! Faites plus attention...\n");
            indicateur = 1;
        } else {
            for(int z=0;z<PIEGE;z++){
                if(PosJoueur[0]== piege[0][z] && PosJoueur[1]==piege[1][z] - 1){
                    printf("Game over");
                    indicateur=2;
                }
            }
            for (int k = 0; k < obstacle; k++) {
                if (PosJoueur[0] == Obst[0][k] && PosJoueur[1] == Obst[1][k] - 1) {
                    printf("Ceci est un obstacle\n");
                    indicateur = 1;
                }
            }
        }
        if (indicateur == 0) {
            PosJoueur[1] = PosJoueur[1] + 1;
        }
        else if(indicateur==2){
            exit(0);
        }
    } else if (touche == 'z') {
        if (PosJoueur[0] == 1) {
            printf("Snoopy s'est cogne la tete contre le mur ! Faites plus attention...\n");
            indicateur = 1;
        } else {
            for(int z=0;z<PIEGE;z++){
                if(PosJoueur[0]== piege[0][z] +1 && PosJoueur[1]==piege[1][z]){
                    printf("Game over");
                    indicateur=2;
                }
            }
            for (int k = 0; k < obstacle; k++) {
                if (PosJoueur[0] == Obst[0][k] + 1 && PosJoueur[1] == Obst[1][k]) {
                    printf("Ceci est un obstacle\n");
                    indicateur = 1;
                }
            }
        }
        if (indicateur == 0) {
            PosJoueur[0] = PosJoueur[0] - 1;
        }
        else if(indicateur==2){
            exit(0);
        }
    } else if (touche == 'x') {
        if (PosJoueur[0] == 8) {
            printf("Snoopy s'est cogne la tete contre le mur ! Faites plus attention...\n");
            indicateur = 1;
        } else {
            for(int z=0;z<PIEGE;z++){
                if(PosJoueur[0]== piege[0][z] - 1 && PosJoueur[1]==piege[1][z]){
                    printf("Game over");
                    indicateur=2;
                }
            }
            for (int k = 0; k < obstacle; k++) {
                if (PosJoueur[0] == Obst[0][k] - 1 && PosJoueur[1] == Obst[1][k]) {
                    printf("Ceci est un obstacle\n");
                    indicateur = 1;
                }
            }
        }
        if (indicateur == 0) {
            PosJoueur[0] = PosJoueur[0] + 1;
        }
        else if(indicateur==2){
            exit(0);
        }
    }
    indicateur = 0;
}

void InitialisationObstacle(int tab[2][obstacle]) {

    int TabObstacle[2][obstacle] = {
            {2, 7, 2,  7,  2, 3, 5, 6},
            {2, 2, 17, 17, 9, 9, 9, 9}};
    for (int i = 0; i < 2; i++) {
        for (int j = 0; j < obstacle; j++) {
            tab[i][j] = TabObstacle[i][j];
        }
    }
}

void AfficheTimer(int timer) {
    printf("Temps restant : %d secondes\n", timer);
}

int Vie(int nb_vies) {
    nb_vies = nb_vies - 1;
    return nb_vies;
}
void gotoligcol( int lig, int col )
{
    COORD mycoord;
    mycoord.X = col;
    mycoord.Y = lig;
    SetConsoleCursorPosition( GetStdHandle( STD_OUTPUT_HANDLE ), mycoord );
}
void InitialisationObstaclePiege(int Piege[2][PIEGE]) {
    int TabPiege[2][PIEGE] = {
            {4, 4,  1, 1,  8, 8,},
            {7, 11, 4, 15, 4, 15}};
    for (int i = 0; i < 2; i++) {
        for (int j = 0; j < PIEGE; j++) {
            Piege[i][j] = TabPiege[i][j];
        }
    }
}

int main() {
    int f = 0;
    int Obstacle[2][obstacle];
    int Piege[2][PIEGE];
    char Tableau[ligne][colonne];
    char pos;
    char oiseaux = 'O';
    int nb_vies = 3;
    int NombreOiseaux = 4;
    int PositionJoueur[2] = {4, 9};
    clock_t start = clock();
    int timer = 120;// 120 secondes pour le timer
    int score=0;

    InitialisationMatrice(Tableau);
    InitialisationObstacle(Obstacle);
    InitialisationObstaclePiege(Piege);
    Affichage(Tableau, PositionJoueur, Obstacle,Piege);
    AfficheTimer(timer);

    while (f != NombreOiseaux && timer > 0) {
        // Mise à jour et affichage du timer
        clock_t end = clock();
        double elapsed = (double) (end - start) / CLOCKS_PER_SEC;

        if (elapsed >= 1.0) {
            timer -= (int) elapsed;
            start = clock(); // Réinitialisation du début pour le prochain tick
        }
        if (kbhit()) {
            pos = getch();
            system("cls");
            DeplacementJoueur(PositionJoueur, pos, Obstacle,Piege);
            Affichage(Tableau, PositionJoueur, Obstacle,Piege);

            AfficheTimer(timer);

            if (Tableau[PositionJoueur[0]][PositionJoueur[1]] == 'O') {
                f++;
                Tableau[PositionJoueur[0]][PositionJoueur[1]] = ' ';
                printf("\nVous avez attrape un oiseau! Il vous en reste %d a attraper.\n", NombreOiseaux - f);
            }
        }
        gotoligcol(11, 0);
        AfficheTimer(timer);

        // si le timer écoulé
        if (timer == 0) {
            Vie(nb_vies);
            if (Vie(nb_vies) > 0) {
                printf("\nLe temps est ecoule ! Vous avez perdu.\n Il ne vous reste plus que %d vies.", Vie(nb_vies));
                sleep(2);
            } else {
                printf("\nVous n'avez plus de vie !\n Attendez avant de retenter votre chance.");
                sleep(2);
            }
            break;
        }
        score=timer*100;
    }
    if (f == NombreOiseaux && timer>0){
        printf("Bravo! Vous avez attrape tous les oiseaux! Votre score est de %d",score);
        sleep(3);
    }
    else  {
        printf("Time's up, Vous avez perdu...\n");
        sleep(3);
    }
    return 0;
}
