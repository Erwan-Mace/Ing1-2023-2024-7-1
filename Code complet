#include <stdio.h>
#include<stdlib.h>
#include<conio.h>
#include <time.h>
#include<unistd.h>
#include <string.h>
#include <pthread.h>

#define ligne 10
#define colonne 20
//Définit le nombre de pièges et d'obstacles.
#define obstacle 8
#define PIEGE 6

void InitialisationMatrice(char Tableau[ligne][colonne]) {
    char NvTableau[ligne][colonne] = {
            {'*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*'},
            {'*', 'O', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'O', '*'},
            {'*', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '*'},
            {'*', ' ', ' ', ' ', ' ', ' ', ' ', 'B', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '*'},
            {'*', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '*'},
            {'*', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '*'},
            {'*', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '*'},
            {'*', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '*'},
            {'*', 'O', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'O', '*'},
            {'*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*'},
    };
    for (int i = 0; i < ligne; i++) {
        for (int j = 0; j < colonne; j++) {
            Tableau[i][j] = NvTableau[i][j];
        }
    }
}

void Affichage(char Tab[ligne][colonne], int PosJoueur[2], int Obstacle[2][obstacle],int Piege[2][PIEGE]) {
    int indicateur = 0;
    for (int i = 0; i < ligne; i++) {
        for (int j = 0; j < colonne; j++) {
            if (PosJoueur[0] == i && PosJoueur[1] == j) {
                printf("P");
                indicateur = 1;
            } else {
//Affiche les pièges dans la matrice.
                for(int z=0;z<PIEGE;z++){
                    if(Piege[0][z]==i && Piege[1][z]==j){
                        printf("%c",177);
                        indicateur=1;
                    }
                }
                for (int k = 0; k < obstacle; k++) {
                    if (Obstacle[0][k] == i && Obstacle[1][k] == j) {
                        printf("%c", 223);
                        indicateur = 1;
                    }
                }
            }
            if (indicateur == 0) {
                printf("%c", Tab[i][j]);
            }
            printf("|");
            indicateur = 0;
        }
        printf("\n");
    }
    printf("\n");
}

int menu(){
    int valmenu;
    printf("****************************************************************\n");
    printf("                       SNOOPY MAGIC SHOW                                      \n");
    printf("****************************************************************\n");
    printf("\n 1 - Commencer une nouvelle partie\n 2 - Continuer\n 3 - Utiliser un mot de passe\n 4 - Regles du jeu\n 5 - Scores\n 6 - Quitter\n");
    scanf("%d",&valmenu);
    return valmenu;
}

void DeplacementJoueur(int PosJoueur[2], char touche, int Obst[2][obstacle]) {
    int indicateur = 0;
    if (touche == 'q') {
        if (PosJoueur[1] == 1) {
            printf("AIE... Snoopy s'est cogne la tete contre le mur !\n");
            indicateur = 1;
        } else {
            for (int k = 0; k < obstacle; k++) {
                if (PosJoueur[0]==Obst[0][k] && PosJoueur[1]==Obst[1][k]+1) {
                    printf("Ceci est un obstacle\n ");
                    indicateur = 1;
                }
            }
        }
        if (indicateur == 0) {
            PosJoueur[1] = PosJoueur[1] - 1;
        }
    } else if (touche == 'd') {
        if (PosJoueur[1] == 18) {
            printf("Snoopy s'est cogne la tete contre le mur ! Faites plus attention...\n");
            indicateur=1;
        } else {
            for (int k = 0; k < obstacle; k++) {
                if (PosJoueur[0] == Obst[0][k] && PosJoueur[1] == Obst[1][k] - 1) {
                    printf("Ceci est un obstacle\n");
                    indicateur = 1;
                }
            }
        }
        if(indicateur==0){
            PosJoueur[1] = PosJoueur[1] + 1;
        }
    } else if (touche == 'z') {
        if (PosJoueur[0] == 1) {
            printf("Snoopy s'est cogne la tete contre le mur ! Faites plus attention...\n");
            indicateur=1;
        } else {
            for (int k = 0; k < obstacle; k++) {
                if (PosJoueur[0] == Obst[0][k] + 1 && PosJoueur[1] == Obst[1][k]) {
                    printf("Ceci est un obstacle\n");
                    indicateur = 1;
                }
            }
        }
        if(indicateur==0){
            PosJoueur[0] = PosJoueur[0] - 1;
        }
    } else if (touche == 's') {
        if (PosJoueur[0] == 8) {
            printf("Snoopy s'est cogne la tete contre le mur ! Faites plus attention...\n");
            indicateur=1;
        } else {
            for (int k = 0; k < obstacle; k++) {
                if (PosJoueur[0] == Obst[0][k] - 1 && PosJoueur[1] == Obst[1][k]) {
                    printf("Ceci est un obstacle\n");
                    indicateur = 1;
                }
            }
        }
        if(indicateur==0){
            PosJoueur[0] = PosJoueur[0] + 1;
        }
    }
    indicateur=0;
}

/*
void compte_a_rebours () {
    int secondes = 120; // Temps imparti pour la partie

    while (secondes > 0) { // Tant que le nombre de secondes n'a pas atteint 0
        printf("Temps restant : %d secondes\n", secondes); // Afficher le nombre de secondes restantes
        sleep(1); // Attendre 1 seconde
        secondes--; // Le nombre de secondes diminue de 1 à chaque boucle
        system("cls"); // Nettoyer la console
    }

    // Quand il ne reste plus de temps
    printf("Time's up!\n");
    sleep(1); // Attendre 1 seconde pour pouvoir lire
}
*/

void InitialisationObstaclePiege(int Piege[2][PIEGE]) {
    int TabPiege[2][PIEGE] = {
            {4, 4,  1, 1,  8, 8,},
            {7, 11, 4, 15, 4, 15}};
    for (int i = 0; i < 2; i++) {
        for (int j = 0; j < PIEGE; j++) {
            Piege[i][j] = TabPiege[i][j];
        }
    }
}

void InitialisationObstacle(int tab[2][obstacle]){

    int TabObstacle[2][obstacle]={
            {2,7,2,7,2,3,5,6},{2,2,17,17,9,9,9,9}};
    for(int i=0;i<2;i++){
        for(int j=0;j<obstacle;j++){
            tab[i][j]=TabObstacle[i][j];
        }
    }
}

void AfficheTimer(int timer) {
    printf("Temps restant : %d secondes\n", timer);
}

int Vie(int nb_vies) {
    nb_vies = nb_vies - 1;
    return nb_vies;
}
//En commentaire car je n'ai pas la bonne bibliothèque.
//void deplacementBalle(int posBalle[2],char Tab[ligne][colonne]){
    /*
     * Pour la vitesse de la balle, il faut juste mettre le temps qu'il sécoule entre 2 déplacements de la balle. (temps qu'elle prend pour passer d'une case à l'autre).
     */
    /*
    int posBalleint[2] = {posBalle[0],posBalle[1]};
    while(1){
        if(posBalle[0] == 1){
            if(posBalleint[0] == posBalle[0] - 1 && posBalleint[1] == posBalle[1] + 1){
                while(!(posBalle[0] == 8 || posBalle[1] == 18)){
                    posBalleint[0] = posBalle[0];
                    posBalleint[1] = posBalle[1];
                    posBalle[0] += 1;
                    posBalle[1] += 1;
                    Tab[posBalle[0]][posBalle[1]] = 'B';
                    Tab[posBalleint[0]][posBalleint[1]] = ' ';
                    sleep(1);
                }
            }
            else if(posBalleint[0] == posBalle[0] + 1 && posBalleint[1] == posBalle[1] + 1){
                while(!(posBalle[0] == 8 || posBalle[1] == 1)){
                    posBalleint[0] = posBalle[0];
                    posBalleint[1] = posBalle[1];
                    posBalle[0] += 1;
                    posBalle[1] -= 1;
                    Tab[posBalle[0]][posBalle[1]] = 'B';
                    Tab[posBalleint[0]][posBalleint[1]] = ' ';
                    sleep(1);
                }
            }
        }
        else if(posBalle[0] == 8){
            if(posBalleint[0] == posBalle[0] - 1 && posBalleint[1] == posBalle[0] - 1){
                while(!(posBalle[0] == 1 || posBalle[1] == 18)){
                    posBalleint[0] = posBalle[0];
                    posBalleint[1] = posBalle[1];
                    posBalle[0] -= 1;
                    posBalle[1] += 1;
                    Tab[posBalle[0]][posBalle[1]] = 'B';
                    Tab[posBalleint[0]][posBalleint[1]] = ' ';
                    sleep(1);
                }
            }
            else if(posBalleint[0] == posBalle[0] - 1 && posBalleint[1] == posBalle[1] + 1){
                while(!(posBalle[0] == 1 || posBalle[1] == 1)){
                    posBalleint[0] = posBalle[0];
                    posBalleint[1] = posBalle[1];
                    posBalle[0] -= 1;
                    posBalle[1] -= 1;
                    Tab[posBalle[0]][posBalle[1]] = 'B';
                    Tab[posBalleint[0]][posBalleint[1]] = ' ';
                    sleep(1);
                }
            }
        }
        else if(posBalle[1] == 1){
            if(posBalleint[0] == posBalle[0] + 1 && posBalleint[1] == posBalle[1] + 1){
                while(posBalle[0] != 1){
                    posBalleint[0] = posBalle[0];
                    posBalleint[1] = posBalle[1];
                    posBalle[0] -= 1;
                    posBalle[1] += 1;
                    Tab[posBalle[0]][posBalle[1]] = 'B';
                    Tab[posBalleint[0]][posBalleint[1]] = ' ';
                    sleep(1);
                }
            }
            else if(posBalleint[0] == posBalle[0] - 1 && posBalleint[1] == posBalle[0] + 1){
                while(posBalle[0] != 8){
                    posBalleint[0] = posBalle[0];
                    posBalleint[1] = posBalle[1];
                    posBalle[0] += 1;
                    posBalle[1] += 1;
                    Tab[posBalle[0]][posBalle[1]] = 'B';
                    Tab[posBalleint[0]][posBalleint[1]] = ' ';
                    sleep(1);
                }
            }
        }
        else if(posBalle[1] == 18){
            if(posBalleint[0] == posBalle[0] + 1 && posBalleint[1] == posBalle[1] + 1){
                while(posBalle[0] != 8){
                    posBalleint[0] = posBalle[0];
                    posBalleint[1] = posBalle[1];
                    posBalle[0] += 1;
                    posBalle[1] -= 1;
                    Tab[posBalle[0]][posBalle[1]] = 'B';
                    Tab[posBalleint[0]][posBalleint[1]] = ' ';
                    sleep(1);
                }
            }
            else if(posBalleint[0] == posBalle[0] + 1 && posBalleint[1] == posBalle[1] - 1){
                while(posBalle[0] != 1){
                    posBalleint[0] = posBalle[0];
                    posBalleint[1] = posBalle[1];
                    posBalle[0] -= 1;
                    posBalle[1] -= 1;
                    Tab[posBalle[0]][posBalle[1]] = 'B';
                    Tab[posBalleint[0]][posBalleint[1]] = ' ';
                    sleep(1);
                }
            }
        }
    }
}
*/
//Pas encore complet car trop de blocs à gérer pour avant la mi-soutenance
void gestionObstacles(char Tab[ligne][colonne], char tabObstacle[obstacle], int tabPiege[2][PIEGE], int posJoueur[2]){
    /*
     * Code ANSII pour les obstacles :
     * 1 (bloc cassable) ♠ = 0x06
     * 2 (bloc poussable) → = 0x1A
     * 3 (bloc piégé) ♣ = 0x05
     * 4 (bloc invincible) ☼ = 0x0F
     * 5 (bloc disparition/apparition) ◙ = 0x0A
     * 6 (bloc de tapis roulant) ▬ = 0x16
     * 7 (balle) ☺ = 0x02
     * 8 (Snoopy) ♂ = 0x0B
     * 9 (oiseau) ♫ = 0x0E
     */
    for(int i = 0; i < obstacle ; i++){
        if(Tab[posJoueur[0]][posJoueur[1]] == tabObstacle[i]){
            if(tabObstacle[i] == 0x06){
                printf("Ce bloc à l'air fragile...\n");
                //Animation du bloc cassable.
            }
            else if(tabObstacle[i] == 0x1A){
                printf("Ce bloc n'a pas l'air bien lourd...\n");
                //Animation du bloc poussable.
            }
            else if(tabObstacle[i] == 0x05){
                printf("Game Over !\n");
                //Retour au menu.
            }
            else if(tabObstacle[i] == 0x0F){
                printf("Essayons un autre chemin...\n");
                //Comme ya marqué au dessus.
            }
            else if(tabObstacle[i] == 0x0A){
                printf("Teleportation...\n");
                //Animation du bloc de téléportation.
            }
            else if(tabObstacle[i] == 0x16){
                printf("Roule Snoopy, Roule !\n");
                //Animation du bloc de tapis roulant.
            }
        }
    }
}

int comparaison(char str1[], char str2[]){
//Ici on compare si le mdp entré par l'utilisateur correspond à l'un des 4 mots de passes stockés dans la base de données.
    int value = 1;
        for(int i = 0; i < strlen(str1); i++){
            if(str1[i] != str2[i]){
                value = 0;
                return value;
            }
        }
    return value;
}

int gestionMDP(char MDP[],char Motdepasse1[], char Motdepasse2[], char Motdepasse3[], char Motdepasse4[]){
//On appelle la fonction précédente pour comparer le mdp choisi jusqu'a ce que l'on trouve une correspondance.
    int value = 0;
    if(comparaison(MDP,Motdepasse1) == 1){
        value += 1;
        return value;
//Ici value = 1 après vérification, cela signifie que l'on retourne 1 au main(), pour signifier d'éxécuter le niveau 1.
    }
    if(comparaison(MDP,Motdepasse2) == 1){
        value += 2;
        return value;
    }
    if(comparaison(MDP,Motdepasse3) == 1){
        value += 3;
        return value;
    }
    if(comparaison(MDP,Motdepasse4) == 1){
        value += 4;
        return value;
    }
    else {
//Le cas échéant on retourne 5 qui va signifier au main() que le mot de passe saisi n'est pas valide.
        return 5;
    }
}

void gestionChoixNiveau(int niveau){
    FILE *Niveau1;
    FILE *Niveau2;
    FILE *Niveau3;
    FILE *Niveau4;
    if(niveau == 1){
        Niveau1 = fopen("niveau1.txt","r");
        if(Niveau1 == NULL){
            printf("Impossible d'ouvrir le fichier.");
            return;
        }

    }
}

void jeu(int niveau){
    int f = 0;
    int Obstacle[2][obstacle];
    char Tableau[ligne][colonne];
    int Piege[2][PIEGE];
    char pos;
    char oiseaux = 'O';
    int nb_vies = 3;
    int NombreOiseaux = 4;
    int PositionJoueur[2] = {4, 9};
    int positionBalle[2] = {3,7};

    clock_t start = clock();
    int timer = 120; // 120 secondes pour le timer
    InitialisationMatrice(Tableau);
    InitialisationObstacle(Obstacle);
    InitialisationObstaclePiege(Piege);
    Affichage(Tableau, PositionJoueur, Obstacle,Piege);
    AfficheTimer(timer);

    while (f != NombreOiseaux && timer > 0) {
        if (kbhit()) {
            //deplacementBalle(positionBalle,Tableau);
            pos = getch();
            system("cls");
            DeplacementJoueur(PositionJoueur, pos, Obstacle);
            Affichage(Tableau, PositionJoueur, Obstacle, Piege);
            // Mise à jour et affichage du timer
            clock_t end = clock();
            double elapsed = (double) (end - start) / CLOCKS_PER_SEC;
            if (elapsed >= 1.0) {
                timer -= (int) elapsed;
                start = clock(); // Réinitialisation du début pour le prochain tick
            }
            AfficheTimer(timer);
            if (Tableau[PositionJoueur[0]][PositionJoueur[1]] == 'O') {
                f++;
                Tableau[PositionJoueur[0]][PositionJoueur[1]] = ' ';
                printf("\nVous avez attrape un oiseau! Il vous en reste %d a attraper.\n", NombreOiseaux - f);
            }
        }
        // si le timer écoulé
        if (timer == 0) {
            Vie(nb_vies);
            if (Vie(nb_vies) > 0) {
                printf("\nLe temps est ecoule ! Vous avez perdu.\nIl ne vous reste plus que %d vies.\n",
                       Vie(nb_vies));
                sleep(2);
            } else {
                printf("\nVous n'avez plus de vie !\nAttendez avant de retenter votre chance.\n");
                sleep(2);
            }
            break;
        }
    }
    if (f == NombreOiseaux) {
        printf("Bravo! Vous avez attrape tous les oiseaux!...\n");
        sleep(2);
        printf("Votre score est de...\n");
        sleep(2);
        printf("%d !\n",timer*100);
        sleep(4);
        printf("Merci d'avoir joue !\n");
        sleep(2);
    }
}


int main() {
//Ceci est la liste des mots de passe utilisé pour charger les différents niveaux. (inspirés des frères et soeurs de snoopy).
    char MDP1[] = "Andy";
    char MDP2[] = "Molly";
    char MDP3[] = "Spike";
    char MDP4[] = "Olaf";
    char tabMDP[4] = {MDP1[strlen(MDP1)],MDP2[strlen(MDP2)],MDP3[strlen(MDP3)],MDP4[strlen(MDP4)]};
    int valmenu = menu();

    if (valmenu == 1) {
        system("cls");
        printf("Chargement du premier niveau...\n");
        sleep(3);
        system("cls");
        jeu(1);
    }
    else if(valmenu == 2) {
        system("cls");
        char valsauvegarde[50];
        printf("Quelle sauvegarde voulez-vous utiliser ?\n");
        scanf("%s",valsauvegarde);
        //Charger la sauvegarde du même nom.
    }
    else if(valmenu == 3){
        system("cls");
        char valmdp[100];
        printf("Entrez votre mot de passe : \n");
        scanf("%s",valmdp);
        int validation = gestionMDP(valmdp, MDP1,MDP2,MDP3,MDP4);
        if(validation == 1){
            system("cls");
            printf("Chargement du premier niveau...\n");
            sleep(2);
            system("cls");
            jeu(1);
            //Charger le premier niveau.
        }
        else if(validation == 2){
            system("cls");
            printf("Chargement du deuxieme niveau...\n");
            sleep(2);
            system("cls");
            jeu(2);
            //Charger le deuxième niveau.
        }
        else if(validation == 3){
            system("cls");
            printf("Chargement du troisieme niveau...\n");
            sleep(2);
            system("cls");
            jeu(3);
            //Charger le troisieme niveau.
        }
        else if(validation == 4){
            system("cls");
            printf("Chargement du quatrieme niveau...\n");
            sleep(2);
            system("cls");
            jeu(4);
            //Charger le quatrieme niveau.
        }
        else {
            system("cls");
            printf("Le mot de passe que vous avez saisi n'est pas dans la base de donnees...\n");
            sleep(2);
            system("cls");
            main();   //Retour au menu.
        }
    }
    else if(valmenu == 4){
        system("cls");
        printf("Dans l'arene, quatre oiseaux, representes par le symbole 'O', sont places aux quatre coins. Le joueur, incarne par le caractere 'P', doit les collecter tous.\n");
        printf("Cependant, des precautions doivent etre prises pour eviter les blocs tueurs symbolises par %c. Ces derniers sont mortels au contact.\n",177);
        printf("L'arene comprend egalement des blocs immobiles, egalement representes par %c, qui servent d obstacles.\n",223);
        printf("Une balle, designee par %c, rebondit à l interieur de l arene et peut eliminer le joueur si elle n est pas esquivee avec succes.\n",0x02);
        printf("Enfin, des blocs poussables, marques par %c, peuvent etre deplaces par le joueur. Ces blocs sont inoffensifs et ne causent aucun degat lorsqu ils sont pousses.\n",64);
        printf("Le but du jeu est de recuperer tous les oiseaux sans subir de degats des blocs tueurs ou de la balle rebondissante, tout en se servant judicieusement des blocs poussables pour faciliter la tache.\n");
        printf("tout ceci dans les 120 secondes impartie");
        sleep(20);
        system("cls");
        main(); //Retour au menu.
    }
    else if(valmenu == 5){
        system("cls");
        printf("Voici les scores : \n[Fichier de sauvegarde] : \n[Fichier de sauvegarde] : \n[Fihcier de sauvegarde] : \n[Fichier de sauvegarde] : \n");
        //Pensez à mettre une boucle for pour avoir le nombre de fichiers de sauvegarde et à ne pas afficher des valeurs vides...
        sleep(5);
        system("cls");
        //Afficher les scores ici.
        main(); //Retour au menu.
    }
    else if(valmenu == 6){
        return 0;     //Fin de jeu.
    }
}
