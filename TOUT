#include <stdio.h>
#include<stdlib.h>
#include<conio.h>
#include <time.h>
#include<unistd.h>

#define ligne 10
#define colonne 20
#define obstacle 8

void InitialisationMatrice(char Tableau[ligne][colonne]) {
    char NvTableau[ligne][colonne] = {
            {'*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*'},
            {'*', 'O', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'O', '*'},
            {'*', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '*'},
            {'*', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '*'},
            {'*', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '*'},
            {'*', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '*'},
            {'*', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '*'},
            {'*', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '*'},
            {'*', 'O', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'O', '*'},
            {'*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*'},
    };
    for (int i = 0; i < ligne; i++) {
        for (int j = 0; j < colonne; j++) {
            Tableau[i][j] = NvTableau[i][j];
        }
    }
}

void Affichage(char Tab[ligne][colonne], int PosJoueur[2], int Obstacle[2][obstacle]) {
    int indicateur = 0;
    for (int i = 0; i < ligne; i++) {
        for (int j = 0; j < colonne; j++) {
            if (PosJoueur[0] == i && PosJoueur[1] == j) {
                printf("P");
                indicateur = 1;
            } else {
                for (int k = 0; k < obstacle; k++) {
                    if (Obstacle[0][k] == i && Obstacle[1][k] == j) {
                        printf("%c", 223);
                        indicateur = 1;
                    }
                }
            }
            if (indicateur == 0) {
                printf("%c", Tab[i][j]);
            }
            printf("|");
            indicateur = 0;
        }
        printf("\n");
    }
    printf("\n");
}

void DeplacementJoueur(int PosJoueur[2], char touche, int Obst[2][obstacle]) {
    int indicateur = 0;
    if (touche == 'q') {
        if (PosJoueur[1] == 1) {
            printf("AIE... Snoopy s'est cogne la tete contre le mur !\n");
            indicateur = 1;
        } else {
            for (int k = 0; k < obstacle; k++) {
                if (PosJoueur[0]==Obst[0][k] && PosJoueur[1]==Obst[1][k]+1) {
                    printf("Ceci est un obstacle\n ");
                    indicateur = 1;
                }
            }
        }
        if (indicateur == 0) {
            PosJoueur[1] = PosJoueur[1] - 1;
        }
    } else if (touche == 'd') {
        if (PosJoueur[1] == 18) {
            printf("Snoopy s'est cogne la tete contre le mur ! Faites plus attention...\n");
            indicateur=1;
        } else {
            for (int k = 0; k < obstacle; k++) {
                if (PosJoueur[0] == Obst[0][k] && PosJoueur[1] == Obst[1][k] - 1) {
                    printf("Ceci est un obstacle\n");
                    indicateur = 1;
                }
            }
        }
        if(indicateur==0){
            PosJoueur[1] = PosJoueur[1] + 1;
        }
    } else if (touche == 'z') {
        if (PosJoueur[0] == 1) {
            printf("Snoopy s'est cogne la tete contre le mur ! Faites plus attention...\n");
            indicateur=1;
        } else {
            for (int k = 0; k < obstacle; k++) {
                if (PosJoueur[0] == Obst[0][k] + 1 && PosJoueur[1] == Obst[1][k]) {
                    printf("Ceci est un obstacle\n");
                    indicateur = 1;
                }
            }
        }
        if(indicateur==0){
            PosJoueur[0] = PosJoueur[0] - 1;
        }
    } else if (touche == 'x') {
        if (PosJoueur[0] == 8) {
            printf("Snoopy s'est cogne la tete contre le mur ! Faites plus attention...\n");
            indicateur=1;
        } else {
            for (int k = 0; k < obstacle; k++) {
                if (PosJoueur[0] == Obst[0][k] - 1 && PosJoueur[1] == Obst[1][k]) {
                    printf("Ceci est un obstacle\n");
                    indicateur = 1;
                }
            }
        }
        if(indicateur==0){
            PosJoueur[0] = PosJoueur[0] + 1;
        }
    }
    indicateur=0;
}

/*
void compte_a_rebours () {
    int secondes = 120; // Temps imparti pour la partie

    while (secondes > 0) { // Tant que le nombre de secondes n'a pas atteint 0
        printf("Temps restant : %d secondes\n", secondes); // Afficher le nombre de secondes restantes
        sleep(1); // Attendre 1 seconde
        secondes--; // Le nombre de secondes diminue de 1 à chaque boucle
        system("cls"); // Nettoyer la console
    }

    // Quand il ne reste plus de temps
    printf("Time's up!\n");
    sleep(1); // Attendre 1 seconde pour pouvoir lire
}
*/

void InitialisationObstacle(int tab[2][obstacle]){

    int TabObstacle[2][obstacle]={
            {2,7,2,7,2,3,5,6},{2,2,17,17,9,9,9,9}};
    for(int i=0;i<2;i++){
        for(int j=0;j<obstacle;j++){
            tab[i][j]=TabObstacle[i][j];
        }
    }
}

void AfficheTimer(int timer) {
    printf("Temps restant : %d secondes\n", timer);
}

int Vie(int nb_vies) {
    nb_vies = nb_vies - 1;
    return nb_vies;
}

int main() {
    int f = 0;
    int Obstacle[2][obstacle];
    char Tableau[ligne][colonne];
    char pos;
    char oiseaux='O';
    int nb_vies = 3;
    int NombreOiseaux=4;
    int PositionJoueur[2] = {4, 9};

    clock_t start = clock();
    int timer = 120; // 120 secondes pour le timer

    InitialisationMatrice(Tableau);
    InitialisationObstacle(Obstacle);
    Affichage(Tableau, PositionJoueur, Obstacle);
    AfficheTimer(timer);

    while (f != NombreOiseaux && timer > 0) {
        if (kbhit()) {
            pos = getch();
            system("cls");
            DeplacementJoueur(PositionJoueur, pos, Obstacle);
            Affichage(Tableau, PositionJoueur, Obstacle);

            // Mise à jour et affichage du timer
            clock_t end = clock();
            double elapsed = (double)(end - start) / CLOCKS_PER_SEC;
            if (elapsed >= 1.0) {
                timer -= (int)elapsed;
                start = clock(); // Réinitialisation du début pour le prochain tick
            }
            AfficheTimer(timer);

            if (Tableau[PositionJoueur[0]][PositionJoueur[1]] == 'O') {
                f++;
                Tableau[PositionJoueur[0]][PositionJoueur[1]] = ' ';
                printf("\nVous avez attrape un oiseau! Il vous en reste %d a attraper.\n", NombreOiseaux - f);
            }
        }
        // si le timer écoulé
        if (timer == 0) {
            Vie(nb_vies);
            if (Vie(nb_vies) > 0) {
                printf("\nLe temps est ecoule ! Vous avez perdu.\n Il ne vous reste plus que %d vies.", Vie(nb_vies));
                sleep(2);
            }
            else {
                printf("\nVous n'avez plus de vie !\n Attendez avant de retenter votre chance.");
                sleep(2);
            }
            break;
        }

    }
    if (f == NombreOiseaux) {
        printf("Bravo! Vous avez attrape tous les oiseaux!\n");
        sleep(2);
    }
    return 0;
}
